What happens when you initialize a repository? Why do you need to do it?
Initializing a repository creates a .git file in that directory to store all the metadata associated with commits and version control. Initially, the .git file contains no commits, as you have to do that explicitly. But it does contain a list of the files in your repository.
You need to initialize the repository to set things up for when you actually want to start tracking versions.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The working directory contains all the files in the directory (with or without version control). The repository contains the version control information, so it will only contain the files that have been explicitly committed to it. The staging area is the intermediate area between the two. You "add" the files to the staging area that you want to bundle in the next commit.
I'm guessing that the value of staging area is that it allows you to select which files you want to include in your commit. You don't have to include them all.

How can you use the staging area to make sure you have one commit per logical change?
You can run "git diff" without an arguments. That will compare the files in your working directory with the ones in the staging area. Any changes will be highlighted, so you can see what has changed and what will be committed in the next commit. You can also run "git diff --staged" to compare the files in the staging area with the most recent commit to check for changes.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are helpful when you want to make changes to the code but want to keep the original working branch in tact. For instance, you might want to use this if you are creating a new experimental version of the program. Or perhaps if you are working on an optional feature and want both versions available. In these cases, you can create and label a new branch and work on that version. The original master version will remain unchanged.

How do the diagrams help you visualize the branch structure?
The diagrams show the "parent" versions of each commit. That allows you to see how the versions are connected and see at which commit they diverged from the master branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches together creates a new commit that combines all the changes in the two branches. The new version now becomes the "Head" for whatever branch was currently checked out. All the history of both paths are saved. We represent it as a new node with parent arrows back to the tips of both branches. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Git's automatic merging combines two branch versions when it's safe to do so. This saves the user a lot of work. But when it's not obvious what Git should do, it punts back to the user. Fortunately, Git provides hints to the user by highlighting the areas of code that contain the conflict and the "parent" version in the nearest common ancestor. Then the user can decide how best to resolve the conflict and which of the three versions (parent, branch1, or branch2) to keep. Having to do the merges manually for all changes would be tedious at best. 
